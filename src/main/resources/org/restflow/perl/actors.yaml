imports:

- classpath:org/restflow/perl/types.yaml

components:

- id: Adder
  type: PerlActor
  properties:
    step: |
      $sum = $a + $b;
    inputs:
      a: 
        default: 0
      b: 
        default: 0
    outputs: 
      sum:
      
- id: ConstantSource
  type: PerlActor
  properties:
    step: |
      $output=$value;
    inputs: 
      value:
    outputs: 
      value:

- id: IntegerConstantSource
  type: PerlActor
  properties:
    step: |
      $output=$value;
    inputs: 
      value:
    outputs: 
      value:
    types:
      value: Integer
      output: Integer


- id: Counter
  type: PerlActor
  properties:
    initialize:
      $count = 0;
    step: |
      $count++;      
    inputs: 
      input:
    outputs:
      count:
    state:
      count:

- id: IntegerBandpassFilter
  type: PerlActor
  properties:
    step: |
      if ($input >= $min && $input <= $max) {
        $output = $input
      } else {
        &disableOutput("output");
      }
    inputs: 
      min:
      max:
      input:
    outputs: 
      output:
      
- id: IntegerSequenceGenerator
  type: PerlActor
  properties:
    initialize: |
      $nextValue = $initial;
    step: |
      $value = $nextValue;
      $nextValue = $nextValue + $step;
      if ($value > $max) {
        &disableOutput("value");
      }
    state:
      nextValue:
    inputs:
      initial: 
        default: 1
      step: 
        default: 1
      max: 
        default: 1
    outputs:
      value:


- id: IntegerStreamMergerNoDuplicates
  type: PerlActor
  properties:
    initialize: |
      $_last = 0;
      $_first = "true";
      &enableInput("a");
      &enableInput("b");
    step: |
      if ($a eq "null" && $b eq "null") {
        &disableOutput("c");
      } elsif ($a eq "null") {
        $c = $b;
        &enableInput("b");
      } elsif ($b eq "null") {
        $c = $a;
        &enableInput("a");
      } elsif ($a < $b) {
        $c = $a;
        &enableInput("a");
      } elsif ($a > $b) {
        $c = $b;
        &enableInput("b");
      } elsif ($a == $b) {
        $c = $a;
        &enableInput("a");
        &enableInput("b");
      }
      if ($c ne "null") {
        if ($_first eq "true") {
          $_last = $c;
          $_first = "false";
        } else {
          if ($c == $_last) {
            &disableOutput("c");
          } else {
            $_last = $c;
          }
        }
      }
    inputs: 
      a:
        optional: true
        nullable: true
        defaultReadiness: false
      b:
        optional: true
        nullable: true
        defaultReadiness: false
    outputs: 
      c:
    state: 
      a:
      b:
      _last:
      _first:

- id: Multiplier
  type: PerlActor
  properties:
    step: $product = $a * $b;
    inputs: 
      a:
      b:
    outputs: 
      product:

- id: PrintStreamWriter
  type: PerlActor
  properties:
    initialize: |
      $buffer = "";
    step: |
      if ($buffer eq "") {
        $buffer = "${message}";
      } else {
        $buffer = "${buffer}_NEWLINE_${message}";
      }
      if ($outputImmediately eq true) {
        print "$message\n";
      }
    dispose: |
      if ($outputAtWrapup eq "true") {
        if ($name ne "null") {
          print "*** ";
          print "$name";
          print " ***\n";
        }
        $buffer =~ s/_NEWLINE_/\n/g;
        print "${buffer}\n";
      }
    state:
      buffer:
    inputs:
      name:
      message:
      outputImmediately: 
        default: true
      outputAtWrapup: 
        default: false

- id: SingleUnitBuffer
  type: ConstantSource

- id: SingleUnitIntegerBuffer
  type: IntegerConstantSource

- id: StringConcatenator
  type: PerlActor
  properties:
    step: |
      $concatenatedString = "${stringOne}${stringTwo}";
    inputs:
      stringOne:
        type: String
      stringTwo:
        type: String
    outputs: 
      concatenatedString: